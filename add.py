import os
import datetime
import threading
import schedule
import time
import csv
import json
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage
import gspread
from google.oauth2.service_account import Credentials

app = Flask(__name__)

# ================= LINE BOT CONFIG =================
LINE_CHANNEL_ACCESS_TOKEN = os.environ.get("LINE_CHANNEL_ACCESS_TOKEN")
LINE_CHANNEL_SECRET = os.environ.get("LINE_CHANNEL_SECRET")
USER_ID = os.environ.get("USER_ID")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ LINE Token ‡πÅ‡∏•‡∏∞ Secret ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if not LINE_CHANNEL_ACCESS_TOKEN or not LINE_CHANNEL_SECRET:
    print("LINE_CHANNEL_ACCESS_TOKEN and LINE_CHANNEL_SECRET not found in environment variables.")
    # ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
else:
    line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
    handler = WebhookHandler(LINE_CHANNEL_SECRET)


# ================= GOOGLE SHEETS CONFIG =================
# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å Environment Variable ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
sheet = None
try:
    credentials_json = os.environ.get("GOOGLE_CREDENTIALS_JSON")
    if credentials_json:
        creds_info = json.loads(credentials_json)
        SCOPE = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
        creds = Credentials.from_service_account_info(creds_info, scopes=SCOPE)
        gc = gspread.authorize(creds)
        sheet = gc.open("ExpenseTracker").sheet1
    else:
        print("Error: GOOGLE_CREDENTIALS_JSON not found in environment variables.")
except Exception as e:
    print(f"Failed to initialize Google Sheets client: {e}")
    
# ================= PARAMETERS =================
THRESHOLD = 500

# ================= HELPER FUNCTION =================
def reply_text(reply_token, text):
    line_bot_api.reply_message(reply_token, TextSendMessage(text=text))

def push_text(user_id, text):
    line_bot_api.push_message(user_id, TextSendMessage(text=text))

# ================= LINE CALLBACK =================
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers.get('X-Line-Signature', '')
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

# ================= HANDLE MESSAGE =================
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    if sheet is None:
        reply_text(event.reply_token, "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheets ‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
        return

    text = event.message.text.strip()
    
    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    if text.lower() == "‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠":
        values = sheet.get_all_values()
        balance = int(values[-1][4]) if len(values) > 1 and values[-1][4].isdigit() else 0
        reply_text(event.reply_token, f"üí∞ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {balance} ‡∏ö‡∏≤‡∏ó")
        return

    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    lines = text.split("\n")
    replies = []

    for line in lines:
        parts = line.split()
        if len(parts) >= 3:
            tran_type, item, amount_str = parts[0], parts[1], parts[2]
            category = parts[3] if len(parts) >= 4 else "-"
            try:
                amount = int(amount_str)
            except ValueError:
                replies.append(f"‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {line}")
                continue

            date_time = datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")

            values = sheet.get_all_values()
            balance = int(values[-1][4]) if len(values) > 1 and values[-1][4].isdigit() else 0

            if tran_type == "‡∏£‡∏±‡∏ö":
                balance += amount
            elif tran_type == "‡∏à‡πà‡∏≤‡∏¢":
                balance -= amount
            else:
                replies.append(f"‚ùå ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡∏£‡∏±‡∏ö' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏à‡πà‡∏≤‡∏¢' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô: {line}")
                continue

            sheet.append_row([date_time, tran_type, item, amount, balance, category])
            replies.append(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß: {tran_type} {item} {amount} ‡∏ö‡∏≤‡∏ó [{category}]\n‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {balance} ‡∏ö‡∏≤‡∏ó")

            if balance < THRESHOLD and USER_ID:
                push_text(USER_ID, f"‚ö†Ô∏è ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ {THRESHOLD} ‡∏ö‡∏≤‡∏ó! ‡∏¢‡∏≠‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {balance} ‡∏ö‡∏≤‡∏ó")
        else:
            replies.append(f"‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {line}\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏à‡πà‡∏≤‡∏¢ ‡∏Ç‡πâ‡∏≤‡∏ß 50 ‡∏≠‡∏≤‡∏´‡∏≤‡∏£")

    if replies:
        reply_text(event.reply_token, "\n\n".join(replies))

# ================= SCHEDULE FUNCTIONS =================
def send_daily_summary():
    if sheet is None:
        print("Scheduler: Cannot send daily summary. Sheet is not initialized.")
        return
    values = sheet.get_all_values()
    today = datetime.datetime.now().strftime("%d/%m/%Y")
    income = sum(int(r[3]) for r in values[1:] if r[0].startswith(today) and r[1] == "‡∏£‡∏±‡∏ö" and r[3].isdigit())
    expense = sum(int(r[3]) for r in values[1:] if r[0].startswith(today) and r[1] == "‡∏à‡πà‡∏≤‡∏¢" and r[3].isdigit())
    balance = int(values[-1][4]) if len(values) > 1 and values[-1][4].isdigit() else 0
    summary = f"üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô {today}\n‡∏£‡∏±‡∏ö: {income} ‡∏ö‡∏≤‡∏ó\n‡∏à‡πà‡∏≤‡∏¢: {expense} ‡∏ö‡∏≤‡∏ó\n‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {balance} ‡∏ö‡∏≤‡∏ó"
    if USER_ID:
        push_text(USER_ID, summary)

def send_weekly_summary():
    if sheet is None:
        print("Scheduler: Cannot send weekly summary. Sheet is not initialized.")
        return
    values = sheet.get_all_values()
    end_date = datetime.datetime.now()
    start_date = end_date - datetime.timedelta(days=7)
    
    income = sum(int(r[3]) for r in values[1:] if datetime.datetime.strptime(r[0].split()[0], "%d/%m/%Y") >= start_date and r[1] == "‡∏£‡∏±‡∏ö" and r[3].isdigit())
    expense = sum(int(r[3]) for r in values[1:] if datetime.datetime.strptime(r[0].split()[0], "%d/%m/%Y") >= start_date and r[1] == "‡∏à‡πà‡∏≤‡∏¢" and r[3].isdigit())
    balance = int(values[-1][4]) if len(values) > 1 and values[-1][4].isdigit() else 0
    
    summary = f"üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ({start_date.strftime('%d/%m/%Y')} - {end_date.strftime('%d/%m/%Y')})\n‡∏£‡∏±‡∏ö: {income} ‡∏ö‡∏≤‡∏ó\n‡∏à‡πà‡∏≤‡∏¢: {expense} ‡∏ö‡∏≤‡∏ó\n‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {balance} ‡∏ö‡∏≤‡∏ó"
    if USER_ID:
        push_text(USER_ID, summary)

def auto_backup_csv():
    if sheet is None:
        print("Scheduler: Cannot create backup. Sheet is not initialized.")
        return
    values = sheet.get_all_values()
    filename = f"Expense_Backup_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    with open(filename, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerows(values)
    if USER_ID:
        push_text(USER_ID, f"üìÅ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: {filename}")

# ================= RUN SCHEDULE IN BACKGROUND =================
def run_schedule():
    schedule.every().day.at("21:00").do(send_daily_summary)
    schedule.every().sunday.at("21:05").do(send_weekly_summary)
    schedule.every().day.at("21:10").do(auto_backup_csv)
    while True:
        schedule.run_pending()
        time.sleep(60)

# ================= MAIN =================
if __name__ == "__main__":
    if os.environ.get("WERKZEUG_RUN_MAIN") == "true":
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ sheet ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ô Scheduler
        if sheet is not None:
            t = threading.Thread(target=run_schedule, daemon=True)
            t.start()
        else:
            print("Scheduler will not run because Google Sheets client is not initialized.")
    app.run(port=5000, debug=True)
